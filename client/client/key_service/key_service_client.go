package key_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new key service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for key service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
KeyServiceAddKey addings a new key
*/
func (a *Client) KeyServiceAddKey(params *KeyServiceAddKeyParams) (*KeyServiceAddKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyServiceAddKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "KeyService_AddKey",
		Method:             "POST",
		PathPattern:        "/v1/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &KeyServiceAddKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*KeyServiceAddKeyOK), nil

}

/*
KeyServiceDeleteKey deletes key by ID
*/
func (a *Client) KeyServiceDeleteKey(params *KeyServiceDeleteKeyParams) (*KeyServiceDeleteKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyServiceDeleteKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "KeyService_DeleteKey",
		Method:             "DELETE",
		PathPattern:        "/v1/keys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &KeyServiceDeleteKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*KeyServiceDeleteKeyOK), nil

}

/*
KeyServiceGetKey gets key by ID
*/
func (a *Client) KeyServiceGetKey(params *KeyServiceGetKeyParams) (*KeyServiceGetKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyServiceGetKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "KeyService_GetKey",
		Method:             "GET",
		PathPattern:        "/v1/keys/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &KeyServiceGetKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*KeyServiceGetKeyOK), nil

}

/*
KeyServiceGetPage gets key list with explicit page number
*/
func (a *Client) KeyServiceGetPage(params *KeyServiceGetPageParams) (*KeyServiceGetPageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyServiceGetPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "KeyService_GetPage",
		Method:             "GET",
		PathPattern:        "/v1/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &KeyServiceGetPageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*KeyServiceGetPageOK), nil

}

/*
KeyServiceGetPageContinued gets continued key list by token another get page variant
*/
func (a *Client) KeyServiceGetPageContinued(params *KeyServiceGetPageContinuedParams) (*KeyServiceGetPageContinuedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyServiceGetPageContinuedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "KeyService_GetPageContinued",
		Method:             "GET",
		PathPattern:        "/v1/keys-continued-list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &KeyServiceGetPageContinuedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*KeyServiceGetPageContinuedOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
