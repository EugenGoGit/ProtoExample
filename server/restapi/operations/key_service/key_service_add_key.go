package key_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// KeyServiceAddKeyHandlerFunc turns a function with the right signature into a key service add key handler
type KeyServiceAddKeyHandlerFunc func(KeyServiceAddKeyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn KeyServiceAddKeyHandlerFunc) Handle(params KeyServiceAddKeyParams) middleware.Responder {
	return fn(params)
}

// KeyServiceAddKeyHandler interface for that can handle valid key service add key params
type KeyServiceAddKeyHandler interface {
	Handle(KeyServiceAddKeyParams) middleware.Responder
}

// NewKeyServiceAddKey creates a new http.Handler for the key service add key operation
func NewKeyServiceAddKey(ctx *middleware.Context, handler KeyServiceAddKeyHandler) *KeyServiceAddKey {
	return &KeyServiceAddKey{Context: ctx, Handler: handler}
}

/*KeyServiceAddKey swagger:route POST /v1/keys KeyService keyServiceAddKey

Adding a new key

*/
type KeyServiceAddKey struct {
	Context *middleware.Context
	Handler KeyServiceAddKeyHandler
}

func (o *KeyServiceAddKey) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewKeyServiceAddKeyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
