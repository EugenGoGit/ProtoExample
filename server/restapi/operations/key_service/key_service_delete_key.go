package key_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// KeyServiceDeleteKeyHandlerFunc turns a function with the right signature into a key service delete key handler
type KeyServiceDeleteKeyHandlerFunc func(KeyServiceDeleteKeyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn KeyServiceDeleteKeyHandlerFunc) Handle(params KeyServiceDeleteKeyParams) middleware.Responder {
	return fn(params)
}

// KeyServiceDeleteKeyHandler interface for that can handle valid key service delete key params
type KeyServiceDeleteKeyHandler interface {
	Handle(KeyServiceDeleteKeyParams) middleware.Responder
}

// NewKeyServiceDeleteKey creates a new http.Handler for the key service delete key operation
func NewKeyServiceDeleteKey(ctx *middleware.Context, handler KeyServiceDeleteKeyHandler) *KeyServiceDeleteKey {
	return &KeyServiceDeleteKey{Context: ctx, Handler: handler}
}

/*KeyServiceDeleteKey swagger:route DELETE /v1/keys/{id} KeyService keyServiceDeleteKey

Delete key by ID

*/
type KeyServiceDeleteKey struct {
	Context *middleware.Context
	Handler KeyServiceDeleteKeyHandler
}

func (o *KeyServiceDeleteKey) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewKeyServiceDeleteKeyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
