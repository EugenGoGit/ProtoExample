package key_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// KeyServiceGetPageContinuedHandlerFunc turns a function with the right signature into a key service get page continued handler
type KeyServiceGetPageContinuedHandlerFunc func(KeyServiceGetPageContinuedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn KeyServiceGetPageContinuedHandlerFunc) Handle(params KeyServiceGetPageContinuedParams) middleware.Responder {
	return fn(params)
}

// KeyServiceGetPageContinuedHandler interface for that can handle valid key service get page continued params
type KeyServiceGetPageContinuedHandler interface {
	Handle(KeyServiceGetPageContinuedParams) middleware.Responder
}

// NewKeyServiceGetPageContinued creates a new http.Handler for the key service get page continued operation
func NewKeyServiceGetPageContinued(ctx *middleware.Context, handler KeyServiceGetPageContinuedHandler) *KeyServiceGetPageContinued {
	return &KeyServiceGetPageContinued{Context: ctx, Handler: handler}
}

/*KeyServiceGetPageContinued swagger:route GET /v1/keys-continued-list KeyService keyServiceGetPageContinued

Get continued key list by token (another GetPage variant)

*/
type KeyServiceGetPageContinued struct {
	Context *middleware.Context
	Handler KeyServiceGetPageContinuedHandler
}

func (o *KeyServiceGetPageContinued) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewKeyServiceGetPageContinuedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
