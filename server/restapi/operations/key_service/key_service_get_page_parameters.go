package key_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewKeyServiceGetPageParams creates a new KeyServiceGetPageParams object
// with the default values initialized.
func NewKeyServiceGetPageParams() KeyServiceGetPageParams {
	var ()
	return KeyServiceGetPageParams{}
}

// KeyServiceGetPageParams contains all the bound params for the key service get page operation
// typically these are obtained from a http.Request
//
// swagger:parameters KeyService_GetPage
type KeyServiceGetPageParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  In: query
	*/
	PageNumber *int32
	/*
	  In: query
	*/
	PageSize *int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *KeyServiceGetPageParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qPageNumber, qhkPageNumber, _ := qs.GetOK("page_number")
	if err := o.bindPageNumber(qPageNumber, qhkPageNumber, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("page_size")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KeyServiceGetPageParams) bindPageNumber(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("page_number", "query", "int32", raw)
	}
	o.PageNumber = &value

	return nil
}

func (o *KeyServiceGetPageParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("page_size", "query", "int32", raw)
	}
	o.PageSize = &value

	return nil
}
